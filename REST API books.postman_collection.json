{
	"info": {
		"_postman_id": "33e27e24-b19a-4684-9287-6a0ef4027dd9",
		"name": "REST API books",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4454148"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Alexey\",\r\n    \"email\": \"user@prof.ru\",\r\n    \"age\": \"18\",\r\n    \"password\": \"paSSword1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/registration",
							"host": [
								"{{host}}"
							],
							"path": [
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"email\": \"user@prof.ru\",    \r\n    \"password\": \"paSSword1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Admin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"email\": \"admin@prof.ru\",    \r\n    \"password\": \"Admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è reader1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"email\": \"reader1@prof.ru\",    \r\n    \"password\": \"Reader1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è reader2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \r\n    \"email\": \"reader2@prof.ru\",    \r\n    \"password\": \"Reader2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "–í—ã—Ö–æ–¥",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "–í—ã—Ö–æ–¥ Admin",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "–í—ã—Ö–æ–¥ Reader1",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "–í—ã—Ö–æ–¥ Reader2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader2_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/logout",
							"host": [
								"{{host}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Book",
			"item": [
				{
					"name": "upload reader1  error validate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "–ù–∞–∑–≤–∞–Ω–∏–µ 1 sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss",
									"type": "text"
								},
								{
									"key": "author",
									"value": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
									"type": "text",
									"disabled": true
								},
								{
									"key": "description",
									"value": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eff0b8b-e399-4c30-9256-5d481a48eda2"
								}
							]
						},
						"url": {
							"raw": "{{host}}/books/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload reader1",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "–ù–∞–∑–≤–∞–Ω–∏–µ 1",
									"type": "text"
								},
								{
									"key": "author",
									"value": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
									"type": "text"
								},
								{
									"key": "description",
									"value": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eff0b5c-44ea-4550-b518-4243ea9f28ac"
								}
							]
						},
						"url": {
							"raw": "{{host}}/books/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "upload reader1 error auth",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "–ù–∞–∑–≤–∞–Ω–∏–µ 1",
									"type": "text"
								},
								{
									"key": "author",
									"value": "–ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏",
									"type": "text"
								},
								{
									"key": "description",
									"value": "–û–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/D:/OSPanel/domains/HeroPC/index.html"
								}
							]
						},
						"url": {
							"raw": "{{host}}/books/upload",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"books"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –ø–æ –∫–Ω–∏–≥–µ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/2",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "–∫–Ω–∏–≥–∞ id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/5",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/books/17",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"17"
							]
						}
					},
					"response": []
				},
				{
					"name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"title\": \"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\",\r\n\"author\": \"–ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏3\",\r\n\"description\": \"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/books/18",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"18"
							]
						}
					},
					"response": []
				},
				{
					"name": "—É–∫–∞–∑–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/books/18/10",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"18",
								"10"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –ø–æ —á—Ç–µ–Ω–∏—é –∫–Ω–∏–≥–∏",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/18/progress",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"18",
								"progress"
							]
						}
					},
					"response": []
				},
				{
					"name": "–∏–Ω—Ñ–∞ –ø–æ —á—Ç–µ–Ω–∏—é –∫–Ω–∏–≥",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/progress",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"progress"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"font_family\": \"Arial\",\r\n    \"font_size\": 16,\r\n    \"text_color\": \"#000000\",\r\n    \"background_color\": \"#1FFFFF\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user/settings",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–Ω–∏–≥–∏",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{reader1_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/user/settings",
							"host": [
								"{{host}}"
							],
							"path": [
								"user",
								"settings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All",
			"item": [
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –∞–¥–º–∏–Ω–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –∞–¥–º–∏–Ω–∞",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books/55",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"55"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/books",
							"host": [
								"{{host}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "–°–º–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–∏–≥–µ",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/books/18/change-visibility",
							"host": [
								"{{host}}"
							],
							"path": [
								"books",
								"18",
								"change-visibility"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}